{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","components/Menu.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","Menu","class","src","logo","alt","style","width","display","margin","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","About","client","ApolloClient","uri","App","BrowserRouter","components_Menu","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a1f4192.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div className=\"mission-key my-3\">\n      <p>\n        <span className=\"mission-key-blob px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"mission-key-blob px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n\n            return (\n              <Fragment>\n                {data.launches.map((launch) => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Year: {launch_year}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Successful:{' '}\n                    <span\n                      className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                      })}\n                    >\n                      {launch_success ? 'Yes' : 'No'}\n                    </span>\n                  </li>\n                </ul>\n\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../logo.png\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <div class=\"bs-component\">\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <Link class=\"navbar-brand\" to=\"/\">\r\n          <img\r\n            src={logo}\r\n            alt=\"SpaceX\"\r\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\r\n          />\r\n        </Link>\r\n        <button\r\n          class=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarColor02\"\r\n          aria-controls=\"navbarColor02\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span class=\"navbar-toggler-icon\" />\r\n        </button>\r\n\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n          <ul class=\"navbar-nav mr-auto\">\r\n            <li class=\"nav-item\">\r\n              <Link to=\"/\" class=\"nav-link\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link to=\"/about\" class=\"nav-link\">\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Fragment className=\"container\">\r\n      <h1 className=\"facts-header text-capitalize text-center\">\r\n        Facts about SpaceX\r\n      </h1>\r\n      <article className=\"facts text-justify\">\r\n        Space Exploration Technologies Corp., t/a SpaceX, is an American\r\n        aerospace manufacturer and space transportation services company\r\n        headquartered in Hawthorne, California. It was founded in 2002 by Elon\r\n        Musk with the goal of reducing space transportation costs to enable the\r\n        colonization of Mars. SpaceX has developed several launch vehicles, the\r\n        Starlink satellite constellation, the Dragon cargo spacecraft, and flown\r\n        humans to the International Space Station on the Crew Dragon Demo-2.\r\n      </article>\r\n\r\n      <article className=\"facts text-justify\">\r\n        SpaceX's achievements include the first privately funded\r\n        liquid-propellant rocket to reach orbit (Falcon 1 in 2008), the first\r\n        private company to successfully launch, orbit, and recover a spacecraft\r\n        (Dragon in 2010), the first private company to send a spacecraft to the\r\n        International Space Station (Dragon in 2012), the first Vertical\r\n        take-off and vertical propulsive landing for an orbital rocket (Falcon 9\r\n        in 2015), the first reuse of an orbital rocket (Falcon 9 in 2017), the\r\n        first private company to launch an object into orbit around the Sun\r\n        (Falcon Heavy's payload of a Tesla Roadster in 2018), and the first\r\n        private company to send astronauts to orbit and to the International\r\n        Space Station (SpaceX Crew Dragon Demo-2 mission in 2020). SpaceX has\r\n        flown 20 cargo resupply missions to the International Space Station\r\n        (ISS) under a partnership with NASA, as well as an uncrewed\r\n        demonstration flight of the human-rated Dragon 2 spacecraft (Crew\r\n        Demo-1) on 2 March 2019, and the first crewed Dragon 2 flight on 30 May\r\n        2020.\r\n      </article>\r\n\r\n      <article className=\"facts text-justify\">\r\n        In December 2015, a Falcon 9 accomplished a propulsive vertical landing.\r\n        This was the first such achievement by a rocket for orbital spaceflight.\r\n        In April 2016, with the launch of SpaceX CRS-8, SpaceX successfully\r\n        vertically landed the first stage on an ocean drone ship landing\r\n        platform. In May 2016, in another first, SpaceX again landed the first\r\n        stage, but during a significantly more energetic geostationary transfer\r\n        orbit mission. In March 2017, SpaceX became the first to successfully\r\n        re-launch and land the first stage of an orbital rocket. In January\r\n        2020, with the third launch of the Starlink project, SpaceX became the\r\n        largest commercial satellite constellation operator in the world.\r\n      </article>\r\n\r\n      <article className=\"facts text-justify\">\r\n        In September 2016, Musk unveiled the Interplanetary Transport System —\r\n        subsequently renamed Starship — a privately funded launch system to\r\n        develop spaceflight technology for use in crewed interplanetary\r\n        spaceflight. In 2017, Musk unveiled an updated configuration of the\r\n        system which is intended to handle interplanetary missions plus become\r\n        the primary SpaceX orbital vehicle after the early 2020s, as SpaceX has\r\n        announced it intends to eventually replace its existing Falcon 9 launch\r\n        vehicles and Dragon space capsule fleet with Starship, even in the\r\n        Earth-orbit satellite delivery market. Starship is planned to be fully\r\n        reusable and will be the largest rocket ever on its debut, scheduled for\r\n        the early 2020s.\r\n      </article>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { Component, Fragment } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport Menu from \"./components/Menu\";\nimport About from \"./components/About\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <Fragment>\n            <Menu />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Launches} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/launch/:flight_number\" component={Launch} />\n              </Switch>\n            </div>\n          </Fragment>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}